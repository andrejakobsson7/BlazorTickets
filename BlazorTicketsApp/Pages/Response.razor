@page "/response/{id:int}"
@using BlazorTicketsApp.Services
@using Shared.Models
@inject ITicketService ticketService
@inject IResponseService responseService

<h3>Would you like to responde?</h3>

<!--Testing-->

<div>

	@if(ticket != null)
	{
		<h1>@ticket.Title</h1>
		<h5 class="text-success"> Description: </h5>
		<h3>@ticket.Description</h3>
		<h3 class="text-success"> Submitted by:</h3>
		<h3> @ticket.SubmittedBy</h3>
		foreach(ResponseModel response in response)
		{

			<br />
			<h2>Submitted by: @response.SubmittedBy</h2>	
			<h2>Response: @response.Response</h2>	

		}
		<label>Issue resolved?</label>
		<InputCheckbox>@ticket.IsResolved</InputCheckbox>

	}
	
</div>

<EditForm Model="NewResponse" OnValidSubmit="HandleSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<InputText @bind-Value="NewResponse.Response" placeholder="Response"></InputText>
	<InputText @bind-Value="NewResponse.SubmittedBy" placeholder="Your name"></InputText>
	<ButtonSubmit Title="Submit"></ButtonSubmit>
	<!-- <input class="btn btn-primary" type="submit" value="Submit">-->
</EditForm>

@code {

	[Parameter]
	public int Id { get; set; }

	private TicketModel? ticket;
	private List<ResponseModel>? response;
	private ResponseModel NewResponse { get; set; } = new();
	private ResponseModel responseModel;

	protected override async Task OnParametersSetAsync()
	{
		ticket = await ticketService.GetTicketByIdAsync(Id);
		response = await responseService.GetAllResponsesByTicketIdAsync(Id);
		NewResponse.TicketId = Id;
	}

	private async Task HandleSubmit()
	{
		if(NewResponse != null)
		{
			await responseService.AddResponseAsync(NewResponse);
			response = await responseService.GetAllResponsesByTicketIdAsync(Id);
			NewResponse = new ResponseModel(); // Clear the form after submission
		}

	}

}

