@page "/"
@using BlazorTicketsApp.Services
@using Shared.Models
@inject ITicketService ticketService
@inject ITagService tagService
@inject IResponseService responseService
@inject ITicketTagService ticketTagService

<PageTitle>Home</PageTitle>

<h1 class="text-center text-success">Tickets!</h1>

<input placeholder="Search by title" @bind="searchText" @bind:event="oninput" />


<h1>Ticket!</h1>

<EditForm Model="ticketModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="ticketModel.SubmittedBy" placeholder="Submitted by"></InputText>
    <InputText @bind-Value="ticketModel.Title" placeholder="Title"></InputText>
    <InputText @bind-Value="ticketModel.Description" placeholder="Description"></InputText>

    <br />
    <input class="btn btn-primary" type="submit" value="Submit">
    <br />
    <br />
    <label>Solved?</label>
    <br />
    <InputCheckbox @bind-Value="ticketModel.IsResolved" />
    <br />
    <h6>Subject</h6>
    <InputSelect @bind-Value="subject" placeholder="Subject">
        @foreach (var tag in Enum.GetValues(typeof(Tag)))
        {
            <option value="@tag">@tag</option>
        }
    </InputSelect>
   
</EditForm>


@if(allTickets != null)
{
  @*   <div class="container"> *@
    <div class="row">
            @foreach (TicketModel ticket in FilteredTickets)
       {
           <div id="container">
            <div class="ticket-problem">
                    <a href="/response/@ticket.Id"><h1>@ticket.Title</h1></a>
                    <h2 class="text-success"> Description: </h2>
                    <h2>@ticket.Description</h2>
                    <h3 class="text-success"> Submitted by:</h3>
                    <h3> @ticket.SubmittedBy</h3>
                    <h4 class="text-success"> Is resolved: </h4>
                    <h4>@ticket.IsResolved</h4>

                    @foreach (ResponseModel response in allResponses.Where(r => r.TicketId == ticket.Id)) // Ändra så det bara är response
                    {
                        <h2 class="text-danger">Response:</h2>
                        <h2>@response.Response</h2>
                        <h4 class="text-danger">Submitted by:</h4>
                        <h4>@response.SubmittedBy</h4>
                    }
              </div> 
        </div>
 
        }
        </div>
 @*    </div> *@
    
}
else
{
    <h2>No tickets are found</h2>
} 

@code {


    private string searchText = "";
    private TicketModel ticketModel { get; set; } = new();
    private Tag subject { get; set; }

    private List<TicketModel> allTickets;
    private List<TicketModel> filteredTickets;
    private List<TagModel> allTags;
    private List<ResponseModel> allResponses;


    List<TicketModel> FilteredTickets => allTickets.Where(t => t.Title.ToLower().Contains(searchText.ToLower())).ToList();


    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        allTickets = await ticketService.GetAllTicketsAsync();
        allTags = await tagService.GetAllTagsAsync();
        allResponses = await responseService.GetAllResponsesAsync();

    }

    private async Task HandleSubmit()
    {
        isLoading = true;
        //Försök skapa en ny ticket.
        TicketModel newTicket = await ticketService.AddTicketAsync(ticketModel);
        if (newTicket != null)
        {
            //Kolla om tag finns med detta namn i databasen
            TagModel? selectedTag = await tagService.GetTagByNameAsync(subject.ToString());
            //Om inte, skapa den och returnera den nya tagen.
            if(selectedTag == null)
            {
                selectedTag = await tagService.AddTagAsync(new TagModel()
                    {
                        Name = subject.ToString()
                    });
            }
            //Om tag redan finns, använd befintligt ID.

            //Skapa en ticket tag
            TicketTag newTicketTag = new()
                {
                    TicketId = newTicket.Id,
                    TagId = selectedTag.Id,
                };
            //Lägg sedan till i TicketTag
            TicketTag? addedTicketTag = await ticketTagService.AddTicketTagAsync(newTicketTag);
        }
        isLoading = false;

    }

}
