@page "/"
@using BlazorTicketsApp.Services
@using Shared.Models
@inject ITicketService ticketService
@inject ITagService tagService
@inject IResponseService responseService

<PageTitle>Home</PageTitle>

<h1 class="text-center text-success">Tickets!</h1>

<input placeholder="Search by title" @bind="searchText" @bind:event="oninput" />


<h1>Ticket!</h1>


@if(allTickets != null)
{
   <div class="row">
        @foreach (TicketModel ticket in FilteredTickets)
   {
    <div class="col-5 ticket-problem" >
                <a href="/response/@ticket.Id"><h1>@ticket.Title</h1></a>
                <h2 class="text-success"> Description: </h2>
                <h2>@ticket.Description</h2>
                <h3 class="text-success"> Submitted by:</h3>
                <h3> @ticket.SubmittedBy</h3>
                <h4 class="text-success"> Is resolved: </h4>
                <h4>@ticket.IsResolved</h4>

                @foreach (ResponseModel response in allResponses.Where(r => r.TicketId == ticket.Id))
                {
                    <h2 class="text-danger">Response:</h2>
                    <h2>@response.Response</h2>
                    <h4 class="text-danger">Submitted by:</h4>
                    <h4>@response.SubmittedBy</h4>
                }
               
    </div>
   }
    </div>
}
else
{
    <h2>No tickets are found</h2>
} 


<EditForm Model="ticketModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="ticketModel.SubmittedBy" placeholder="Submitted by"></InputText>
    <InputText @bind-Value="ticketModel.Title" placeholder="Title"></InputText>
    <InputText @bind-Value="ticketModel.Description" placeholder="Description"></InputText>

    <br />
    <input class="btn btn-primary" type="submit" value="Submit">
    <br />
    <br />
    <label>Solved?</label>
    <br />
    <InputCheckbox @bind-Value="ticketModel.IsResolved" />
    <h6>Subject</h6>
    <InputSelect @bind-Value="subject" placeholder="Subject">
        @foreach (var tag in Enum.GetValues(typeof(Tag)))
        {
            <option value="@tag">@tag</option>
        }
    </InputSelect>
</EditForm> 

@code {
   

    private string searchText = "";
    private TicketModel ticketModel { get; set; } = new();
    private Tag subject { get; set; }

    private List<TicketModel> allTickets;
    private List<TicketModel> filteredTickets;
    private List<TagModel> allTags;
    private List<ResponseModel> allResponses;


    List<TicketModel> FilteredTickets => allTickets.Where(t => t.Title.ToLower().Contains(searchText.ToLower())).ToList();


    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        allTickets = await ticketService.GetAllTicketsAsync();
        allTags = await tagService.GetAllTagsAsync();
        allResponses = await responseService.GetAllResponsesAsync();

    }

    private async Task HandleSubmit()
    {
        isLoading = true;
        await ticketService.AddTicketAsync(ticketModel);
        isLoading = false;

    }

}
