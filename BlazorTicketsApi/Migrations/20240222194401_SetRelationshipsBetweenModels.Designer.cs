// <auto-generated />
using BlazorTicketsApi.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorTicketsApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240222194401_SetRelationshipsBetweenModels")]
    partial class SetRelationshipsBetweenModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.ResponseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("response");

                    b.Property<string>("SubmittedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("submitted_by");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Responses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Response = "Thank you for reporting the issue.",
                            SubmittedBy = "Support Team",
                            TicketId = 3
                        },
                        new
                        {
                            Id = 2,
                            Response = "We have escalated your feature request.",
                            SubmittedBy = "Product Manager",
                            TicketId = 2
                        },
                        new
                        {
                            Id = 3,
                            Response = "Investigating the database connection issue.",
                            SubmittedBy = "Database Administrator",
                            TicketId = 1
                        },
                        new
                        {
                            Id = 4,
                            Response = "UI enhancement task assigned to design team.",
                            SubmittedBy = "Project Lead",
                            TicketId = 4
                        },
                        new
                        {
                            Id = 5,
                            Response = "Security vulnerability patched.",
                            SubmittedBy = "Security Analyst",
                            TicketId = 5
                        });
                });

            modelBuilder.Entity("Shared.Models.TagModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Python"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CSharp"
                        },
                        new
                        {
                            Id = 3,
                            Name = "WebDevelopment"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DataStructures"
                        },
                        new
                        {
                            Id = 5,
                            Name = "JavaScript"
                        });
                });

            modelBuilder.Entity("Shared.Models.TicketModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit")
                        .HasColumnName("is_resolved");

                    b.Property<string>("SubmittedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("submitted_by");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Application crashes on startup.",
                            IsResolved = false,
                            SubmittedBy = "John Doe",
                            Title = "Bug Fix"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Add dark mode to settings.",
                            IsResolved = false,
                            SubmittedBy = "Alice Smith",
                            Title = "Feature Request"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Users are unable to connect to the database server.",
                            IsResolved = false,
                            SubmittedBy = "Emily Johnson",
                            Title = "Database Connection Issue"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Improve button styling on the login page.",
                            IsResolved = false,
                            SubmittedBy = "Mark Adams",
                            Title = "UI Enhancement"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Application response time is slow during data retrieval.",
                            IsResolved = false,
                            SubmittedBy = "Alex Chen",
                            Title = "Performance Optimization"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Add export functionality for user data.",
                            IsResolved = false,
                            SubmittedBy = "Laura Lee",
                            Title = "Missing Feature"
                        },
                        new
                        {
                            Id = 7,
                            Description = "The \"Contact Us\" link leads to a 404 page.",
                            IsResolved = false,
                            SubmittedBy = "Michael Brown",
                            Title = "Broken Link"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Vulnerability in authentication process.",
                            IsResolved = false,
                            SubmittedBy = "Sophia Rodriguez",
                            Title = "Security Concern"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Incorrect translations in the French version.",
                            IsResolved = false,
                            SubmittedBy = "Pierre Dupont",
                            Title = "Localization Issue"
                        },
                        new
                        {
                            Id = 10,
                            Description = "CSV import fails for large datasets.",
                            IsResolved = false,
                            SubmittedBy = "Grace Liu",
                            Title = "Data Import Error"
                        });
                });

            modelBuilder.Entity("Shared.Models.TicketTag", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.HasKey("TicketId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TicketTags");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            TagId = 5
                        },
                        new
                        {
                            TicketId = 1,
                            TagId = 4
                        },
                        new
                        {
                            TicketId = 10,
                            TagId = 1
                        },
                        new
                        {
                            TicketId = 6,
                            TagId = 2
                        },
                        new
                        {
                            TicketId = 6,
                            TagId = 5
                        },
                        new
                        {
                            TicketId = 6,
                            TagId = 3
                        },
                        new
                        {
                            TicketId = 9,
                            TagId = 3
                        });
                });

            modelBuilder.Entity("Shared.Models.ResponseModel", b =>
                {
                    b.HasOne("Shared.Models.TicketModel", "Ticket")
                        .WithMany("Responses")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Shared.Models.TicketTag", b =>
                {
                    b.HasOne("Shared.Models.TagModel", "Tag")
                        .WithMany("TicketTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.TicketModel", "Ticket")
                        .WithMany("TicketTags")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Shared.Models.TagModel", b =>
                {
                    b.Navigation("TicketTags");
                });

            modelBuilder.Entity("Shared.Models.TicketModel", b =>
                {
                    b.Navigation("Responses");

                    b.Navigation("TicketTags");
                });
#pragma warning restore 612, 618
        }
    }
}
